name: Will it blend?

on: [pull_request]

jobs:
  lint:
    runs-on: ${{ matrix.os }}
    name: Linter os ${{ matrix.os }}, Python ${{ matrix.python-version }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache dependencies
      id: cache
      uses: actions/cache@v2
      env:
        cache-name: cache-friday-lint-dep
      with:
        path: |
          ${{ env.pythonLocation}}/lib/python${{ matrix.python-version }}/site-packages/*
          ~/venv
        key: ${{ matrix.os }}-pip-${{ env.cache-name }}-${{ hashfiles('lint-requirements.txt') }}
        restore-keys: |
          ${{ matrix.os }}-pip-${{ env.cache-name }}-
          ${{ matrix.os }}-pip-
          ${{ matrix.os }}-
    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        python -m venv ~/venv
        . ~/venv/bin/activate
        python -m pip install --upgrade pip
        pip install flake8
    - name: Lint with flake8
      run: |
        . ~/venv/bin/activate
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The Github editor is 127 chars wide
        flake8 . --count --statistics --config=./setup.cfg
  build:
    runs-on: ${{ matrix.os }}
    name: Launch check os ${{ matrix.os }}, Python ${{ matrix.python-version }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache dependencies
      id: cache
      uses: actions/cache@v2
      env:
        cache-name: cache-friday-build-dep
      with:
        path: |
          ${{ env.pythonLocation}}/lib/python${{ matrix.python-version }}/site-packages/*
          ~/venv
        key: ${{ matrix.os }}-pip-${{ env.cache-name }}-${{ hashfiles('requirements.txt') }}
        restore-keys: |
          ${{ matrix.os }}-pip-${{ env.cache-name }}-
          ${{ matrix.os }}-pip-
          ${{ matrix.os }}-
    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        python -m venv ~/venv
        . ~/venv/bin/activate
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
    - name: Install google key for translations
      env:
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
        PRIVATE_KEY_ID: ${{ secrets.PRIVATE_KEY_ID }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        CLIENT_EMAIL: ${{ secrets.CLIENT_EMAIL }}
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        CLIENT_CERT_URL: ${{ secrets.CLIENT_CERT_URL }}
      run: |
        . ~/venv/bin/activate
        if ! [ -f friday-trans-key.json ]; then python create_trans_key.py; fi
        if [ -f friday-trans-key.json ]; then printf "File created"; fi
    # - name: Install Database
    #   env:
    #     DB_FILE: ${{ secrets.DB_FILE }}
    #   run: |
    #     . ~/venv/bin/activate
    #     sudo apt-get -y install sqlite3
    #     python create_db_for_workflow_step_one.py        
    #     sudo chmod +x mysqltosqlite.sh
    #     ./mysqltosqlite.sh friday.sql | sqlite3 friday.sqlite
    #     python create_db_for_workflow_step_two.py        
    #     if [ -f friday.db ]; then printf "File created"; fi
    - name: Test with pytest
      env:
        TOKENTEST: ${{ secrets.TOKENTEST }}
        DATABASE: ${{ secrets.DATABASE }}
        DATABASETEST: ${{ secrets.DATABASETEST }}
        DBLWEBHOOKPASS: ${{ secrets.DBLWEBHOOKPASS }}
        DBUSER: ${{ secrets.DBUSER }}
        DBPASS: ${{ secrets.DBPASS }}
        DBHOST: ${{ secrets.DBHOST }}
        WEBHOOKSPAM: ${{ secrets.WEBHOOKSPAM }}
        WEBHOOKISSUES: ${{ secrets.WEBHOOKISSUES }}
        WEBHOOKINFO: ${{ secrets.WEBHOOKINFO }}
        WEBHOOKERRORS: ${{ secrets.WEBHOOKERRORS }}
        WEBHOOKCHAT: ${{ secrets.WEBHOOKCHAT }}
        WEBHOOKJOIN: ${{ secrets.WEBHOOKJOIN }}
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
        PRIVATE_KEY_ID: ${{ secrets.PRIVATE_KEY_ID }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        CLIENT_EMAIL: ${{ secrets.CLIENT_EMAIL }}
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        CLIENT_CERT_URL: ${{ secrets.CLIENT_CERT_URL }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      run: |
        . ~/venv/bin/activate
        if [ -f friday-trans-key.json ]; then printf "Google file here"; fi
        pytest
  docs-build:
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.os }}, Python ${{ matrix.python-version}}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache dependencies
      id: cache
      uses: actions/cache@v2
      env:
        cache-name: cache-friday-docs-dependencies
      with:
        path: |
          ${{ env.pythonLocation}}/lib/python${{ matrix.python-version }}/site-packages/*
          ~/venv
        key: ${{ matrix.os }}-pip-${{ env.cache-name }}-${{ hashfiles('requirements.txt') }}
        restore-keys: |
          ${{ matrix.os }}-pip-${{ env.cache-name }}-
          ${{ matrix.os }}-pip-
          ${{ matrix.os }}-
    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        python -m venv ~/venv
        . ~/venv/bin/activate
        python -m pip install --upgrade pip
        if [ -f docs/requirements.txt ]; then python -m pip install -r docs/requirements.txt; fi
    - name: Build
      run: |
        . ~/venv/bin/activate
        cd docs/
        mkdocs build