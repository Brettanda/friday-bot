import discord
import typing
import psutil
from discord.ext import commands
from discord.utils import oauth_url, cached_property
from typing_extensions import TYPE_CHECKING

from functions import MyContext, config, embed, views, MessageColors, time

if TYPE_CHECKING:
  from index import Friday as Bot

GENERAL_CHANNEL_NAMES = {"welcome", "general", "lounge", "chat", "talk", "main"}


INVITE_PERMISSIONS = discord.Permissions(
    administrator=True,
    manage_roles=True,
    manage_channels=True,
    manage_guild=True,
    kick_members=True,
    ban_members=True,
    send_messages=True,
    manage_threads=True,
    send_messages_in_threads=True,
    create_private_threads=True,
    manage_messages=True,
    embed_links=True,
    attach_files=True,
    read_message_history=True,
    add_reactions=True,
    connect=True,
    speak=True,
    move_members=True,
    use_voice_activation=True,
    view_audit_log=True,
    moderate_members=True,
)


class InviteButtons(discord.ui.View):
  def __init__(self, link: str):
    super().__init__(timeout=None)
    self.add_item(discord.ui.Button(emoji="\N{HEAVY PLUS SIGN}", label="Invite me!", style=discord.ButtonStyle.link, url=link, row=1))


class General(commands.Cog):

  def __init__(self, bot: "Bot"):
    self.bot = bot
    self.process = psutil.Process()

  def __repr__(self) -> str:
    return f"<cogs.{self.__cog_name__}>"

  def welcome_message(self, *, prefix: str = config.defaultPrefix) -> dict:
    friday_emoji = self.bot.get_emoji(833507598413201459) if self.bot.get_emoji(833507598413201459) is not None else ''
    return dict(embed=embed(
        title=f"{friday_emoji}Thank you for inviting me to your server{friday_emoji}",
        description=f"I will respond to messages when I am mentioned. To get started with commands type `{prefix}help` or `@{self.bot.user.name} help`.\n"
        f"If something goes terribly wrong and you want it to stop, talk to my creator with the command `{prefix}issue <message>`",
        thumbnail=self.bot.user.display_avatar.url,
        footer="Made with ❤️!",
        fieldstitle=["Prefix", "Setting a language", "Notice for chat system", "Chatbot intelligence"],
        fieldsval=[
            f"To change my prefix use the `{prefix}prefix` command.",
            f"If you want me to speak another language then use the `{prefix}lang <language>` command eg.`{prefix}lang spanish` or `{prefix}lang es`",
            "Chat message from Friday are not generated by a human, they are now generated by an AI, the only response from a human is the BOLDED sensitive content message",
            "__For Friday's chatbot system to be free by default the model used is not the smartest. To get access to smarter models please check out the patreon page.__"
        ],
        fieldsin=[False, False, False, False]
    ), view=views.Links())

  @commands.Cog.listener()
  async def on_guild_join(self, guild: discord.Guild):
    await self.bot.wait_until_ready()
    priority_channels = []
    channels = []
    for channel in guild.text_channels:
      if channel == guild.system_channel or any(x in channel.name for x in GENERAL_CHANNEL_NAMES):
        priority_channels.append(channel)
      else:
        channels.append(channel)
    channels = priority_channels + channels
    try:
      channel = next(
          x
          for x in channels
          if isinstance(x, discord.TextChannel) and x.permissions_for(guild.me).send_messages
      )
    except StopIteration:
      return

    try:
      await channel.send(**self.welcome_message())
    except discord.Forbidden:
      pass

    # try:
    #   audit = await guild.audit_logs(limit=5, action=discord.AuditLogAction.bot_add, after=after).flatten()
    #   if len(audit) == 0 or len([i for i in audit if i.target.id == self.bot.user.id and i.created_at > after]) == 0:
    #     return

    #   action: discord.AuditLogEntry = audit[0]
    #   await self.bot.db.query("UPDATE ")

  @commands.command(name="intro", help="Replies with the intro message for the bot")
  async def norm_intro(self, ctx: "MyContext"):
    await ctx.send(**self.welcome_message())

  @cached_property
  def link(self):
    return oauth_url(self.bot.user.id, permissions=INVITE_PERMISSIONS, scopes=["bot", "applications.commands"])

  @commands.command("invite", help="Get the invite link to add me to your server")
  async def _norm_invite(self, ctx):
    await ctx.send(embed=embed(title="Invite me :)"), view=InviteButtons(self.link))

  # @cog_ext.cog_slash(name="invite", description="Get the invite link to add me to your server")
  # async def _slash_invite(self, ctx):
  #   await ctx.send(embed=embed(title="Invite me :)", description=f"[Invite link]({self.link})"))

  @commands.command(name="info", aliases=["about"], help="Displays some information about myself :)")
  async def norm_info(self, ctx):
    await self.info(ctx)

  async def info(self, ctx: "MyContext"):
    support_guild = self.bot.get_guild(707441352367013899)
    owner = await self.bot.get_or_fetch_member(support_guild, self.bot.owner_id)

    uptime = time.human_timedelta(self.bot.uptime, accuracy=None, brief=True, suffix=False)

    memory_usage = self.process.memory_full_info().uss / 1024**2
    cpu_usage = self.process.cpu_percent() / psutil.cpu_count()

    return await ctx.send(
        embed=embed(
            title=f"{self.bot.user.name} - About",
            thumbnail=self.bot.user.display_avatar.url,
            author_icon=owner.display_avatar.url,
            author_name=str(owner),
            footer="Made with ❤️!",
            description="Big thanks to all Patrons!",
            fieldstitle=["Servers joined", "Latency", "Shards", "Loving Life", "Uptime", "CPU/RAM", "Existed since"],
            fieldsval=[len(self.bot.guilds), f"{(self.bot.get_shard(ctx.guild.shard_id).latency if ctx.guild else self.bot.latency)*1000:,.0f} ms", self.bot.shard_count, "True", uptime, f'{memory_usage:.2f} MiB\n{cpu_usage:.2f}% CPU', f"<t:{int(self.bot.user.created_at.timestamp())}:D>"],
        ), view=views.Links()
    )

  @commands.command(name="serverinfo", aliases=["guildinfo"], help="Shows information about the server")
  @commands.guild_only()
  async def norm_serverinfo(self, ctx):
    await ctx.send(
        embed=embed(
            title=ctx.guild.name + " - Info",
            thumbnail=ctx.guild.icon.url if ctx.guild.icon is not None else None,
            fieldstitle=["Server Name", "Members", "Server ID", "Created", "Verification level", "Roles"],
            # fieldsval=[f"```py\n{ctx.guild.name}```", f"```py\n{ctx.guild.member_count}```", f"```py\n{ctx.guild.id}```", f"```py\n{ctx.guild.region}```", f'```py\n{ctx.guild.created_at.strftime("%b %d, %Y")}```', f"```py\n{ctx.guild.verification_level}```", f"```py\n{len(ctx.guild.roles)}```"]
            fieldsval=[ctx.guild.name, ctx.guild.member_count, ctx.guild.id, time.format_dt(ctx.guild.created_at, style="D"), ctx.guild.verification_level, len(ctx.guild.roles)],
            footer=f"Shard: {ctx.guild.shard_id+1}/{self.bot.shard_count}",
        )
    )

  @commands.command(name="userinfo", extras={"examples": ["@Friday", "476303446547365891"]}, help="Some information on the mentioned user")
  @commands.guild_only()
  async def norm_userinfo(self, ctx, *, user: typing.Optional[typing.Union[discord.Member, discord.User]] = None):
    user = user or ctx.author
    await ctx.send(embed=embed(
        title=f"{user.name} - Info",
        thumbnail=user.display_avatar.url,
        fieldstitle=["Name", "Nickname", "Mention", "Role count", "Created", "Joined", "Top Role", "Pending Verification"],
        fieldsval=[
            user.name,
            user.display_name if user.display_name != user.name else None,
            user.mention,
            len(user.roles) if hasattr(user, "roles") else 0,
            time.format_dt(user.created_at, style="D") if hasattr(user, "created_at") else None,
            time.format_dt(user.joined_at, style="D") if hasattr(user, "joined_at") else None,
            user.top_role.mention if hasattr(user, "top_role") else None,
            user.pending if hasattr(user, "pending") else None],
        color=user.color if user.color.value != 0 else MessageColors.DEFAULT
    ))

  @commands.command(name="roleinfo", help="Shows information about the role")
  @commands.guild_only()
  async def norm_roleinfo(self, ctx, *, role: discord.Role):
    await ctx.send(embed=embed(
        title=f"{role.name} - Info",
        thumbnail=role.icon and role.icon.url,
        fieldstitle=["Role Name", "Role ID", "Role Color", "Role Position", "Role Hoisted", "Role Mentionable", "Role Created"],
        fieldsval=[role.name, role.id, role.color, role.position, role.hoist, role.mentionable, time.format_dt(role.created_at, style="D")],
        color=role.colour if role.colour.value != 0 else MessageColors.DEFAULT
    ))


def setup(bot):
  bot.add_cog(General(bot))
