from typing import Optional

import discord
from discord.ext import commands
from typing_extensions import TYPE_CHECKING

from functions import MyContext, config, embed, MessageColors, views

if TYPE_CHECKING:
  from index import Friday as Bot

GENERAL_CHANNEL_NAMES = {"welcome", "general", "lounge", "chat", "talk", "main"}


class General(commands.Cog):

  def __init__(self, bot: "Bot"):
    self.bot = bot

  def __repr__(self) -> str:
    return "<cogs.General>"

  def welcome_message(self, *, prefix: str = config.defaultPrefix) -> dict:
    friday_emoji = self.bot.get_emoji(833507598413201459) if self.bot.get_emoji(833507598413201459) is not None else ''
    return dict(embed=embed(
        title=f"{friday_emoji}Thank you for inviting me to your server{friday_emoji}",
        description=f"I will respond to messages when I am mentioned. To get started with commands type `{prefix}help` or `@{self.bot.user.name} help`.\n"
        f"If something goes terribly wrong and you want it to stop, talk to my creator with the command `{prefix}issue <message>`",
        thumbnail=self.bot.user.display_avatar.url,
        fieldstitle=["Prefix", "Setting a language", "Notice for chat system", "Chatbot intelligence"],
        fieldsval=[
            f"To change my prefix use the `{prefix}prefix` command.",
            f"If you want me to speak another language then use the `{prefix}lang <language>` command eg.`{prefix}lang spanish` or `{prefix}lang es`",
            "Chat message from Friday are not generated by a human, they are now generated by an AI, the only response from a human is the BOLDED sensitive content message",
            "__For Friday's chatbot system to be free by default the model used is not the smartest. To get access to smarter models please check out the patreon page.__"
        ],
        fieldsin=[False, False, False, False]
    ), view=views.Links())

  @commands.Cog.listener()
  async def on_guild_join(self, guild: discord.Guild):
    await self.bot.wait_until_ready()
    priority_channels = []
    channels = []
    for channel in guild.text_channels:
      if channel == guild.system_channel or any(x in channel.name for x in GENERAL_CHANNEL_NAMES):
        priority_channels.append(channel)
      else:
        channels.append(channel)
    channels = priority_channels + channels
    try:
      channel = next(
          x
          for x in channels
          if isinstance(x, discord.TextChannel) and x.permissions_for(guild.me).send_messages
      )
    except StopIteration:
      return

    try:
      await channel.send(**self.welcome_message())
    except discord.Forbidden:
      pass

    # try:
    #   audit = await guild.audit_logs(limit=5, action=discord.AuditLogAction.bot_add, after=after).flatten()
    #   if len(audit) == 0 or len([i for i in audit if i.target.id == self.bot.user.id and i.created_at > after]) == 0:
    #     return

    #   action: discord.AuditLogEntry = audit[0]
    #   await self.bot.db.query("UPDATE ")

  @commands.command(name="intro", help="Replies with the intro message for the bot")
  async def norm_intro(self, ctx: "MyContext"):
    await ctx.send(**self.welcome_message())


def setup(bot):
  bot.add_cog(General(bot))
